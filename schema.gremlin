schema.vertexLabel('comment').ifNotExists().partitionBy('id', Bigint).property('browserUsed', Varchar).property('content', Varchar).property('creationDate', Timestamp).property('length', Int).property('locationIP', Varchar).create()
schema.vertexLabel('forum').ifNotExists().partitionBy('id', Bigint).property('creationDate', Timestamp).property('title', Varchar).create()
schema.vertexLabel('organisation').ifNotExists().partitionBy('id', Bigint).property('label', Varchar).property('name', Varchar).property('url', Varchar).create()
schema.vertexLabel('person').ifNotExists().partitionBy('id', Bigint).property('birthday', Date).property('browserUsed', Varchar).property('creationDate', Timestamp).property('email', Varchar).property('firstName', Varchar).property('gender', Varchar).property('lastName', Varchar).property('locationIP', Varchar).property('speaks', Varchar).create()
schema.vertexLabel('place').ifNotExists().partitionBy('id', Bigint).property('label', Varchar).property('name', Varchar).property('url', Varchar).create()
schema.vertexLabel('post').ifNotExists().partitionBy('id', Bigint).property('browserUsed', Varchar).property('content', Varchar).property('creationDate', Timestamp).property('imageFile', Varchar).property('language', Varchar).property('length', Int).property('locationIP', Varchar).create()
schema.vertexLabel('tag').ifNotExists().partitionBy('id', Bigint).property('name', Varchar).property('url', Varchar).create()
schema.vertexLabel('tagClass').ifNotExists().partitionBy('id', Bigint).property('name', Varchar).property('url', Varchar).create()
schema.edgeLabel('hasCreator').ifNotExists().from('comment').to('person').partitionBy(OUT, 'id', 'comment_id').clusterBy(IN, 'id', 'person_id', Asc).create()
schema.edgeLabel('hasTag').ifNotExists().from('comment').to('tag').partitionBy(OUT, 'id', 'comment_id').clusterBy(IN, 'id', 'tag_id', Asc).create()
schema.edgeLabel('isLocatedIn').ifNotExists().from('comment').to('place').partitionBy(OUT, 'id', 'comment_id').clusterBy(IN, 'id', 'place_id', Asc).create()
schema.edgeLabel('replyOf').ifNotExists().from('comment').to('comment').partitionBy(OUT, 'id', 'out_id').clusterBy(IN, 'id', 'in_id', Asc).create()
schema.edgeLabel('replyOf').ifNotExists().from('comment').to('post').partitionBy(OUT, 'id', 'comment_id').clusterBy(IN, 'id', 'post_id', Asc).create()
schema.edgeLabel('containerOf').ifNotExists().from('forum').to('post').partitionBy(OUT, 'id', 'forum_id').clusterBy(IN, 'id', 'post_id', Asc).create()
schema.edgeLabel('hasMember').ifNotExists().from('forum').to('person').partitionBy(OUT, 'id', 'forum_id').clusterBy(IN, 'id', 'person_id', Asc).property('joinDate', Timestamp).create()
schema.edgeLabel('hasModerator').ifNotExists().from('forum').to('person').partitionBy(OUT, 'id', 'forum_id').clusterBy(IN, 'id', 'person_id', Asc).create()
schema.edgeLabel('hasTag').ifNotExists().from('forum').to('tag').partitionBy(OUT, 'id', 'forum_id').clusterBy(IN, 'id', 'tag_id', Asc).create()
schema.edgeLabel('isLocatedIn').ifNotExists().from('organisation').to('place').partitionBy(OUT, 'id', 'organisation_id').clusterBy(IN, 'id', 'place_id', Asc).create()
schema.edgeLabel('hasInterest').ifNotExists().from('person').to('tag').partitionBy(OUT, 'id', 'person_id').clusterBy(IN, 'id', 'tag_id', Asc).create()
schema.edgeLabel('isLocatedIn').ifNotExists().from('person').to('place').partitionBy(OUT, 'id', 'person_id').clusterBy(IN, 'id', 'place_id', Asc).create()
schema.edgeLabel('knows').ifNotExists().from('person').to('person').partitionBy(OUT, 'id', 'out_id').clusterBy(IN, 'id', 'in_id', Asc).property('creationDate', Timestamp).create()
schema.edgeLabel('likes').ifNotExists().from('person').to('comment').partitionBy(OUT, 'id', 'person_id').clusterBy(IN, 'id', 'comment_id', Asc).property('creationDate', Timestamp).create()
schema.edgeLabel('likes').ifNotExists().from('person').to('post').partitionBy(OUT, 'id', 'person_id').clusterBy(IN, 'id', 'post_id', Asc).property('creationDate', Timestamp).create()
schema.edgeLabel('studyAt').ifNotExists().from('person').to('organisation').partitionBy(OUT, 'id', 'person_id').clusterBy(IN, 'id', 'organisation_id', Asc).property('classYear', Int).create()
schema.edgeLabel('workAt').ifNotExists().from('person').to('organisation').partitionBy(OUT, 'id', 'person_id').clusterBy(IN, 'id', 'organisation_id', Asc).property('workFrom', Int).create()
schema.edgeLabel('isPartOf').ifNotExists().from('place').to('place').partitionBy(OUT, 'id', 'out_id').clusterBy(IN, 'id', 'in_id', Asc).create()
schema.edgeLabel('hasCreator').ifNotExists().from('post').to('person').partitionBy(OUT, 'id', 'post_id').clusterBy(IN, 'id', 'person_id', Asc).create()
schema.edgeLabel('hasTag').ifNotExists().from('post').to('tag').partitionBy(OUT, 'id', 'post_id').clusterBy(IN, 'id', 'tag_id', Asc).create()
schema.edgeLabel('isLocatedIn').ifNotExists().from('post').to('place').partitionBy(OUT, 'id', 'post_id').clusterBy(IN, 'id', 'place_id', Asc).create()
schema.edgeLabel('hasType').ifNotExists().from('tag').to('tagClass').partitionBy(OUT, 'id', 'tag_id').clusterBy(IN, 'id', 'tagClass_id', Asc).create()
schema.edgeLabel('isSubclassOf').ifNotExists().from('tagClass').to('tagClass').partitionBy(OUT, 'id', 'out_id').clusterBy(IN, 'id', 'in_id', Asc).create()

schema.edgeLabel('hasCreator').from('comment').to('person').materializedView('comment__hasCreator__person_by_person_id').ifNotExists().inverse().create()
schema.edgeLabel('replyOf').from('comment').to('comment').materializedView('comment__replyOf__comment_by_in_id').ifNotExists().inverse().create()
schema.edgeLabel('replyOf').from('comment').to('post').materializedView('comment__replyOf__post_by_post_id').ifNotExists().inverse().create()
schema.edgeLabel('containerOf').from('forum').to('post').materializedView('forum__containerOf__post_by_post_id').ifNotExists().inverse().create()
schema.edgeLabel('knows').from('person').to('person').materializedView('person__knows__person_by_in_id').ifNotExists().inverse().create()
schema.edgeLabel('hasCreator').from('post').to('person').materializedView('post__hasCreator__person_by_person_id').ifNotExists().inverse().create()
